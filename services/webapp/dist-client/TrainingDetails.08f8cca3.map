{"version":3,"sources":["src/features/mobile-programs/containers/TrainingDetails.jsx"],"names":["mapState","state","match","program","programs","items","find","i","id","params","programId","training","trainings","trainingId","exercisesMap","exercises","reduce","acc","curr","progression","map","item","duration","value","type","isNotFound","Boolean","length","mapDispatch","dispatch","history","loadPrograms","startTraining","push","url","TrainingDetails","React","PureComponent","props","goBack","marginBottom","title","renderBody","trainingType","PropTypes","shape","string","isRequired","exerciseType","propTypes","func","arrayOf","bool","defaultProps"],"mappings":"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","file":"TrainingDetails.08f8cca3.map","sourceRoot":"..","sourcesContent":["/* eslint react/prefer-stateless-function: off */\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport MobilePage, { Padding, List, Text, Button } from 'lib/MobilePage'\nimport { updatePrograms } from '../programs.service'\n\nconst mapState = (state, { match }) => {\n    const program = state.programs.items.find(i => i.id === match.params.programId)\n    const training = program\n        ? program.trainings.find(i => i.id === match.params.trainingId)\n        : null\n\n    const exercisesMap = training\n        ? program.exercises.reduce((acc, curr) => ({ ...acc, [curr.id]: curr }), {})\n        : null\n\n    const exercises = training\n        ? training.progression\n            .map(item => ({\n                ...item,\n                ...exercisesMap[item.id],\n                duration: `${item.value}${exercisesMap[item.id].type === 'duration' ? 's' : ' reps'}`,\n            }))\n        : null\n\n    return {\n        training,\n        exercises,\n        isNotFound: (\n            Boolean(!program && state.programs.items.length)\n            || Boolean(!training && program)\n        ),\n    }\n}\n\nconst mapDispatch = (dispatch, { history, match }) => {\n    return {\n        loadPrograms: () => dispatch(updatePrograms()),\n        startTraining: () => history.push(`${match.url}/play`),\n    }\n}\n\nclass TrainingDetails extends React.PureComponent {\n    componentDidMount () {\n        if (!this.props.training) this.props.loadPrograms()\n    }\n\n    renderBody () {\n        if (this.props.isNotFound) {\n            return (\n                <Text onClick={this.props.goBack}>\n                    training not found, click here to go to the list\n                </Text>\n            )\n        }\n\n        if (!this.props.training) {\n            return (\n                <Text>loading...</Text>\n            )\n        }\n\n        return (\n            <div>\n                <div style={{ marginBottom: 10 }}>\n                    <Button block onClick={this.props.startTraining}>start training</Button>\n                </div>\n                <List\n                    items={this.props.exercises}\n                    subtitleProp={'duration'}\n                />\n            </div>\n        )\n    }\n\n    render () {\n        return (\n            <MobilePage>\n                <MobilePage.Header>\n                    {this.props.training ? this.props.training.title : '...'}\n                </MobilePage.Header>\n                <MobilePage.Body>\n                    <Padding>\n                        {this.renderBody()}\n                    </Padding>\n                </MobilePage.Body>\n            </MobilePage>\n        )\n    }\n}\n\nconst trainingType = PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n})\n\nconst exerciseType = PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    duration: PropTypes.string.isRequired,\n})\n\nTrainingDetails.propTypes = {\n    loadPrograms: PropTypes.func.isRequired,\n    startTraining: PropTypes.func.isRequired,\n    training: trainingType,\n    exercises: PropTypes.arrayOf(exerciseType),\n    isNotFound: PropTypes.bool.isRequired,\n}\n\nTrainingDetails.defaultProps = {\n    training: null,\n    exercises: null,\n}\n\nexport default connect(mapState, mapDispatch)(TrainingDetails)\n"]}